/*
 * File: optmodel_P.tppl
 * Description: Probabilistic model taken from optimal metabarcoding adjusted to TreePPL, Predictions
 * Compilation:
 *  tpplc models/optimal_metabarcoding/optmodel_P.tppl -m 'smc-bpf' --resample align --output optmodel_P
 * Execution with 10000 particles and 1 sweep:
 * ./optmodel_P models/data/optmetabar/H_real.json 10000 1 > OptPred_H.json
 */

/*
 * Recursive prediction function per sample
 */
function predict_sample(dataset: Real[][], k: Real, theta: Real, logC: Real[], sample: Int, species: Int, n: Real[]): Real[] { 
  let new_n = predict_species(dataset, k, theta, logC[sample], sample, species, n);
  if eqi(sample, 21) { //21 samples
    return new_n;
  }
  else {
    return predict_sample(dataset, k, theta, logC, addi(sample, 1), species, new_n);
  }
}

/*
 * Recursive prediction function per species
 */
function predict_species(dataset: Real[][], k: Real, theta: Real, logC: Real, sample: Int, species: Int, n: Real[]): Real[] { 
  if dataset[sample][species] > 0.0 { 
    assume sampled_n ~ Uniform(1.0, 30.0);
    observe dataset[sample][species] ~ Gamma(sampled_n*k, exp(logC)*theta); 
    let new_n = join([n, [sampled_n]]);
    if eqi(species, 12) { //NOTE could be length(species) later when length bug fixed.
      return new_n;
    }
    else {
      return predict_species(dataset, k, theta, logC, sample, addi(species, 1), new_n);
    }
  }
  else { 
    let new_n = join([n, [0.0]]);
    if eqi(species, 12) { //NOTE could be length(species) later when length bug fixed.
      return new_n;
    }
    else {
      return predict_species(dataset, k, theta, logC, sample, addi(species, 1), new_n);
    }
  }
}


/*
 * Model function
 * Data:
 *   Homogenate data, optimal metabarcoding. dataset is number of reads r per species per sample 
 * Priors: 
 *   As in paper 2023. 
 * Posterior:
 *   returning k at the moment
 */
model function myModel(dataset: Real[][]) : Real[]  {

  assume k ~ Gamma(1.0, 10.0);
  assume logTheta ~ Gaussian(0.0, 2.0); 
  let theta = exp(logTheta);

  assume tau ~ Gamma(3.0, (1.0/27.0));
  let sigma = sqrt(1.0 / tau); //sigma2 sampled from InverseGamma
  assume mu ~ Gaussian(6.5, sigma); 

  let nsamples = 21; 
  // sample nsamples (index j) logC's
  let logC = iid(gaussian, GaussianParam{mean=mu, dev=sigma}, nsamples); 

  //Train on biological spike-ins
  for j in 1 to nsamples { 
    for i in 1 to 4 { //4 spikeins n is 1
      if dataset[j][i] > 0.0 { //cannot observe a zero from Gamma
        observe dataset[j][i] ~ Gamma(k, exp(logC[j])*theta);
      }
    }
  }

  let n = predict_sample(dataset, k, theta, logC, 10, 6, []); //Go through samples from 10 to 21, species from 6 to 12

  return(n); 
}

