/*
 * File: optmodel_4k4theta.tppl
 * Description: Probabilistic model taken from optimal metabarcoding
 * Compilation:
 *   tpplc models/optimal_metabarcoding/optmodel_4k4theta.tppl -m 'smc-apf' --resample align --output optmodel_4k4theta
 * Execution with 500000 particles and 100 sweeps (homogenate data H.json or lysate data L.json): 
 * ./optmodel_4k4theta models/data/optmetabar/H.json 500000 100  > output/H_4k4theta.json
 */

/*
 * Model function
 * Data:
 *   Homogenate data in H.json or lysate data in L.json: 
 * Priors: 
 *   From optimal metabarcoding paper, Iwaszkiewicz-Eggebrecht et al., 2023
 *
 */
model function myModel(dataset: Int[][]) : ()  {
  let k = iid(gamma, GammaParam{shape = 1.0, scale = 10.0}, 4); 
  let logTheta = iid(gaussian, GaussianParam{mean = 0.0, dev = 2.0}, 4); 
  let theta = sapply(logTheta, exp); 
  
  assume tau ~ Gamma(3.0, (1.0/27.0));
  let sigma = sqrt(1.0 / tau); //sigma2 sampled from InverseGamma
  assume mu ~ Gaussian(6.5, sigma); 

  let nsamples = length(dataset); // nsamples is total number of samples, with index j
  let logC = iid(gaussian, GaussianParam{mean = mu, dev = sigma}, nsamples); // sample j logC's
  let c = sapply(logC, exp); 

  for j in 1 to nsamples { 
    for i in 1 to 4 { //i is index of spike-in species(artificial or biological) or simply species index
      if neqi(dataset[j][i], 0) { //cannot observe a zero from Gamma
        observe Real(dataset[j][i]) ~ Gamma(k[i], c[j] * theta[i]);
      }
    }
  }

  //return () //Not returning samples in this version
}